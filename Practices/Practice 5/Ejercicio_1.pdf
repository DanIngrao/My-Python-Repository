%PDF-1.4%‚„œ”
1 0 obj<</MarkInfo<</Marked true>>/Metadata 2 0 R/Pages 3 0 R/StructTreeRoot 5 0 R/Type/Catalog>>endobj2 0 obj<</Length 3513/Subtype/XML/Type/Metadata>>stream
<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c017 91.164464, 2020/06/15-10:20:05        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <xmp:ModifyDate>2021-09-05T18:00:53-03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-09-05T18:00:53-03:00</xmp:CreateDate>
         <xmp:MetadataDate>2021-09-05T18:00:53-03:00</xmp:MetadataDate>
         <xmp:CreatorTool>Canva</xmp:CreatorTool>
         <dc:format>application/pdf</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">[S5] Python TOTAL Cheat Sheets</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Facundo Nicol√°s Colque</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <xmpMM:DocumentID>uuid:2b038470-c9db-4e83-a74e-2efde3734cef</xmpMM:DocumentID>
         <xmpMM:InstanceID>uuid:64358e28-c567-421f-9d73-08bedba402ab</xmpMM:InstanceID>
         <pdf:Producer>Canva</pdf:Producer>
         <pdf:Keywords>DAEpLMhmRl8,BADsJ4ZOebQ</pdf:Keywords>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
endstreamendobj3 0 obj<</Count 1/Kids[6 0 R]/MediaBox[0.0 7.91997 1620.0 1627.92]/Type/Pages>>endobj5 0 obj<</IDTree 7 0 R/K 8 0 R/ParentTree 9 0 R/ParentTreeNextKey 1/Type/StructTreeRoot>>endobj7 0 obj<</Kids[10 0 R 11 0 R]>>endobj8 0 obj<</ID 12 0 R/K 13 0 R/P 5 0 R/S/Document>>endobj9 0 obj<</Nums[0[14 0 R 15 0 R 16 0 R 17 0 R 17 0 R 18 0 R 19 0 R 20 0 R 21 0 R 22 0 R 23 0 R 24 0 R 25 0 R 26 0 R 27 0 R 28 0 R 28 0 R 29 0 R 30 0 R 31 0 R 32 0 R 33 0 R 34 0 R 35 0 R 36 0 R 37 0 R 37 0 R 38 0 R 39 0 R 40 0 R 41 0 R 42 0 R 43 0 R 43 0 R 44 0 R 45 0 R 46 0 R 47 0 R 48 0 R 49 0 R 50 0 R 51 0 R]]>>endobj14 0 obj<</ID 52 0 R/K<</MCID 0/Pg 6 0 R/Type/MCR>>/P 53 0 R/S/NonStruct>>endobj15 0 obj<</ID 54 0 R/K<</MCID 1/Pg 6 0 R/Type/MCR>>/P 53 0 R/S/NonStruct>>endobj16 0 obj<</ID 55 0 R/K<</MCID 2/Pg 6 0 R/Type/MCR>>/P 53 0 R/S/NonStruct>>endobj17 0 obj<</ID 56 0 R/K[<</MCID 3/Pg 6 0 R/Type/MCR>><</MCID 4/Pg 6 0 R/Type/MCR>>]/P 53 0 R/S/NonStruct>>endobj18 0 obj<</ID 57 0 R/K<</MCID 5/Pg 6 0 R/Type/MCR>>/P 53 0 R/S/NonStruct>>endobj19 0 obj<</ID 58 0 R/K<</MCID 6/Pg 6 0 R/Type/MCR>>/P 53 0 R/S/NonStruct>>endobj20 0 obj<</ID 59 0 R/K<</MCID 7/Pg 6 0 R/Type/MCR>>/P 53 0 R/S/NonStruct>>endobj21 0 obj<</ID 60 0 R/K<</MCID 8/Pg 6 0 R/Type/MCR>>/P 53 0 R/S/NonStruct>>endobj22 0 obj<</ID 61 0 R/K<</MCID 9/Pg 6 0 R/Type/MCR>>/P 62 0 R/S/NonStruct>>endobj23 0 obj<</ID 63 0 R/K<</MCID 10/Pg 6 0 R/Type/MCR>>/P 62 0 R/S/NonStruct>>endobj24 0 obj<</ID 64 0 R/K<</MCID 11/Pg 6 0 R/Type/MCR>>/P 62 0 R/S/NonStruct>>endobj25 0 obj<</ID 65 0 R/K<</MCID 12/Pg 6 0 R/Type/MCR>>/P 62 0 R/S/NonStruct>>endobj26 0 obj<</ID 66 0 R/K<</MCID 13/Pg 6 0 R/Type/MCR>>/P 62 0 R/S/NonStruct>>endobj27 0 obj<</ID 67 0 R/K<</MCID 14/Pg 6 0 R/Type/MCR>>/P 62 0 R/S/NonStruct>>endobj28 0 obj<</ID 68 0 R/K[<</MCID 15/Pg 6 0 R/Type/MCR>><</MCID 16/Pg 6 0 R/Type/MCR>>]/P 62 0 R/S/NonStruct>>endobj29 0 obj<</ID 69 0 R/K<</MCID 17/Pg 6 0 R/Type/MCR>>/P 62 0 R/S/NonStruct>>endobj30 0 obj<</ID 70 0 R/K<</MCID 18/Pg 6 0 R/Type/MCR>>/P 62 0 R/S/NonStruct>>endobj31 0 obj<</ID 71 0 R/K<</MCID 19/Pg 6 0 R/Type/MCR>>/P 72 0 R/S/NonStruct>>endobj32 0 obj<</ID 73 0 R/K<</MCID 20/Pg 6 0 R/Type/MCR>>/P 72 0 R/S/NonStruct>>endobj33 0 obj<</ID 74 0 R/K<</MCID 21/Pg 6 0 R/Type/MCR>>/P 72 0 R/S/NonStruct>>endobj34 0 obj<</ID 75 0 R/K<</MCID 22/Pg 6 0 R/Type/MCR>>/P 72 0 R/S/NonStruct>>endobj35 0 obj<</ID 76 0 R/K<</MCID 23/Pg 6 0 R/Type/MCR>>/P 72 0 R/S/NonStruct>>endobj36 0 obj<</ID 77 0 R/K<</MCID 24/Pg 6 0 R/Type/MCR>>/P 72 0 R/S/NonStruct>>endobj37 0 obj<</ID 78 0 R/K[<</MCID 25/Pg 6 0 R/Type/MCR>><</MCID 26/Pg 6 0 R/Type/MCR>>]/P 72 0 R/S/NonStruct>>endobj38 0 obj<</ID 79 0 R/K<</MCID 27/Pg 6 0 R/Type/MCR>>/P 72 0 R/S/NonStruct>>endobj39 0 obj<</ID 80 0 R/K<</MCID 28/Pg 6 0 R/Type/MCR>>/P 72 0 R/S/NonStruct>>endobj40 0 obj<</ID 81 0 R/K<</MCID 29/Pg 6 0 R/Type/MCR>>/P 82 0 R/S/NonStruct>>endobj41 0 obj<</ID 83 0 R/K<</MCID 30/Pg 6 0 R/Type/MCR>>/P 82 0 R/S/NonStruct>>endobj42 0 obj<</ID 84 0 R/K<</MCID 31/Pg 6 0 R/Type/MCR>>/P 82 0 R/S/NonStruct>>endobj43 0 obj<</ID 85 0 R/K[<</MCID 32/Pg 6 0 R/Type/MCR>><</MCID 33/Pg 6 0 R/Type/MCR>>]/P 82 0 R/S/NonStruct>>endobj44 0 obj<</ID 86 0 R/K<</MCID 34/Pg 6 0 R/Type/MCR>>/P 82 0 R/S/NonStruct>>endobj45 0 obj<</ID 87 0 R/K<</MCID 35/Pg 6 0 R/Type/MCR>>/P 82 0 R/S/NonStruct>>endobj46 0 obj<</ID 88 0 R/K<</MCID 36/Pg 6 0 R/Type/MCR>>/P 82 0 R/S/NonStruct>>endobj47 0 obj<</ID 89 0 R/K<</MCID 37/Pg 6 0 R/Type/MCR>>/P 82 0 R/S/NonStruct>>endobj48 0 obj<</ID 90 0 R/K<</MCID 38/Pg 6 0 R/Type/MCR>>/P 82 0 R/S/NonStruct>>endobj49 0 obj<</ID 91 0 R/K<</MCID 39/Pg 6 0 R/Type/MCR>>/P 92 0 R/S/NonStruct>>endobj50 0 obj<</ID 93 0 R/K<</MCID 40/Pg 6 0 R/Type/MCR>>/P 94 0 R/S/NonStruct>>endobj51 0 obj<</ID 95 0 R/K<</MCID 41/Pg 6 0 R/Type/MCR>>/P 96 0 R/S/NonStruct>>endobj95 0 obj(node00036829)endobj96 0 obj<</ID 97 0 R/K 51 0 R/P 98 0 R/S/P>>endobj97 0 obj(node00036736)endobj98 0 obj<</ID 99 0 R/K 96 0 R/P 100 0 R/S/Div>>endobj99 0 obj(node00036828)endobj100 0 obj<</ID 101 0 R/K 98 0 R/P 102 0 R/S/Div>>endobj101 0 obj(node00036826)endobj102 0 obj<</ID 103 0 R/K 100 0 R/P 104 0 R/S/Div>>endobj103 0 obj(node00036825)endobj104 0 obj<</ID 105 0 R/K 102 0 R/P 106 0 R/S/Div>>endobj105 0 obj(node00036824)endobj106 0 obj<</ID 107 0 R/K[108 0 R 109 0 R 104 0 R]/P 110 0 R/S/Div>>endobj107 0 obj(node00036750)endobj110 0 obj<</ID 111 0 R/K 106 0 R/P 112 0 R/S/Div>>endobj111 0 obj(node00036749)endobj112 0 obj<</ID 113 0 R/K 110 0 R/P 114 0 R/S/Div>>endobj113 0 obj(node00036748)endobj114 0 obj<</ID 115 0 R/K 112 0 R/P 116 0 R/S/Div>>endobj115 0 obj(node00036747)endobj116 0 obj<</ID 117 0 R/K 114 0 R/P 118 0 R/S/Div>>endobj117 0 obj(node00036746)endobj118 0 obj<</ID 119 0 R/K 116 0 R/P 13 0 R/S/Div>>endobj119 0 obj(node00036745)endobj13 0 obj<</ID 120 0 R/K 118 0 R/P 8 0 R/S/Div>>endobj120 0 obj(node00036743)endobj108 0 obj<</ID 121 0 R/K 122 0 R/P 106 0 R/S/Div>>endobj109 0 obj<</ID 123 0 R/K 124 0 R/P 106 0 R/S/Div>>endobj123 0 obj(node00036815)endobj124 0 obj<</ID 125 0 R/K 126 0 R/P 109 0 R/S/Div>>endobj125 0 obj(node00036816)endobj126 0 obj<</ID 127 0 R/K 128 0 R/P 124 0 R/S/Div>>endobj127 0 obj(node00036817)endobj128 0 obj<</ID 129 0 R/K[92 0 R 94 0 R]/P 126 0 R/S/Div>>endobj129 0 obj(node00036819)endobj92 0 obj<</ID 130 0 R/K 49 0 R/P 128 0 R/S/P>>endobj94 0 obj<</ID 131 0 R/K 50 0 R/P 128 0 R/S/P>>endobj131 0 obj(node00036822)endobj130 0 obj(node00036820)endobj121 0 obj(node00036767)endobj122 0 obj<</ID 132 0 R/K 133 0 R/P 108 0 R/S/Div>>endobj132 0 obj(node00036768)endobj133 0 obj<</ID 134 0 R/K 135 0 R/P 122 0 R/S/Div>>endobj134 0 obj(node00036769)endobj135 0 obj<</ID 136 0 R/K[53 0 R 62 0 R 72 0 R 82 0 R]/P 133 0 R/S/Div>>endobj136 0 obj(node00036771)endobj53 0 obj<</ID 137 0 R/K[14 0 R 15 0 R 16 0 R 17 0 R 18 0 R 19 0 R 20 0 R 21 0 R]/P 135 0 R/S/P>>endobj62 0 obj<</ID 138 0 R/K[22 0 R 23 0 R 24 0 R 25 0 R 26 0 R 27 0 R 28 0 R 29 0 R 30 0 R]/P 135 0 R/S/P>>endobj72 0 obj<</ID 139 0 R/K[31 0 R 32 0 R 33 0 R 34 0 R 35 0 R 36 0 R 37 0 R 38 0 R 39 0 R]/P 135 0 R/S/P>>endobj82 0 obj<</ID 140 0 R/K[40 0 R 41 0 R 42 0 R 43 0 R 44 0 R 45 0 R 46 0 R 47 0 R 48 0 R]/P 135 0 R/S/P>>endobj140 0 obj(node00036805)endobj139 0 obj(node00036793)endobj138 0 obj(node00036740)endobj137 0 obj(node00036739)endobj6 0 obj<</BleedBox[0.0 7.91997 1620.0 1627.9199]/Contents 141 0 R/MediaBox[0.0 7.91997 1620.0 1627.9199]/Parent 3 0 R/Resources<</ExtGState<</G3 142 0 R>>/Font<</F10 143 0 R/F11 144 0 R/F6 145 0 R/F7 146 0 R/F8 147 0 R/F9 148 0 R>>/Pattern<</P4 149 0 R/P5 150 0 R>>/ProcSet[/PDF/Text/ImageB/ImageC/ImageI]>>/StructParents 0/TrimBox[0.0 7.91997 1620.0 1627.9199]/Type/Page>>endobj141 0 obj<</Filter/FlateDecode/Length 2843>>stream
xúÌ[€é‰∂}ÔØ–s sY¨‚0Ã’»É;^ œ¡ƒqÃ.êµˇ9%J"’[«pl√3¿nwId]x™ÍP‚«y¸,~?3ÕW
.öL9ª·Â√Â?Ω!DØˇ$2Œüæª¸ÌO√G\bC¯Æ7‘OCÉ˛˛ıÀ°|¯Ù˝Â›ó<|ˇ√8ï£`á¢’y˛YE„?£Ë¸Æ‘z{FßI6¶¡0≈Pt∑ÇÆzb≤i†lçè…Ú çˇ'6f8CâER¿7ñh]8ì7ﬁ˙0|ñm2ë=ë⁄˜ÓÎøˇ¯„wü>ﬂ._~x˜µﬂ>¸Eˇ˚·Â„lb§`\∞ñ/b$È∫|h•l"8D X(∂néçxè˚¢XcìÉÌ^Ø∫8º\¢gE‹G«ÖúÜ…0ó˚¢qêalä&⁄l}36YkÇàËp∆˝â»x&a	ôê·x+[l∆Ë*MŸ˚·µëÎL†8®é»Ü!¸ Q˚[™û,ﬁUÈÎ%¬˚Li%çdçÀv+ú)áZô8D$fØsV) ¿B„ú!ÎúY≠l•	˙Å›‘HCD\¨SôáÃÎ<	~âéÖΩ=aeî:DÕ"√∆Y'Ç·v2ºˆŸ!dnt\ïàMP‚c0Q<¿íÃ¡≈	I'Ã…põ\p∆
êX•Ø+©´RÖôœ„ª“≤ºÄ¡Î.P_/ˇBJı‡Ó‹˝˜Ç´Îñ`∂”â>4“h…dqäÃúÅÜ8 íI¢ò/I…ódt4õ‡√(CŒF]üËΩ°†ËPsV#MYbuÊ:8ëD:≥-K@Cq;!ÿj]…™’/óF*å5˜K–F2VdPã£†ŒÜ≥¶d5• 0›‚\ï"u,£09|Æ“§éÍå÷õê¸ÚΩ$úç[deıÀ\ÏVó„Z*≈¿!Y™4!Ä—Î2†("mXKÄœÜ¢®¨†¥ËQDq ö»ºj¯ N~8‘≈§h™cßÙ(c«‰â,|äBX∞—´^NÈ6T´gIAw ./	<a{íE;…F`!Î¬æ¨,ÊòÊ{¿,∏ﬁ∂∂Ë‡ï1ŒFi°Æ(∑¨0c¥xá∏‚ì«w !ó{Ùªñ6îDﬁœwH¿wm:”,
Ω*uÈ®*	X/;"JgR≠ﬁ[ÖÙ®—∑»0z¥j]Ôl¸¡åÄQÆ}|A,îƒ1˜C-»Sì™“–`tÓòÄü†Õ)$ßÌxLh¥ïV c2 Ã´{êÃÆLÑ≈öø.⁄t»$Bû°…ó‹ò¡v∫iRTö[jO)&Àmç7„dc⁄z¯2¢‡6CA7X˝*ÇÃ¡BbT˙<|Ê4ª?√ˆnüP>∞xËemÕËM8(è )(&<q-®<á—¿ígçñU[>ºÍÑ	Â)¢â‰Aπu=«Î‰˚ñÉ! ≈HØ¯S∂Sl∏èF0|˛˘ªØ˛¸àªø¯‚˛Ò·ÚÓŸÜÚÖ√›Ô5©F™ˇ?ºˇp˘a†/Ü˜ˇæ†ñZÔ|ƒ•˜ˇ ºÂ E‹°^»yºÄ˙Ä
UÃ+íõ/Xî~…ÀÀ„µdQ9@?Ê+OE	£	ƒÀÖô/$«>pGI'î‹ÒÏI“%kÌ.w¥«Tµ?w¥ﬂ=ÌËHË%>÷+Â
JáçÓXIﬂì˚«Yãß“â+ÎÄ±T˝EçGß…–ôèGd?[.Ãt<`Ú‰È´áÀ”˚+ê““ÿiDìI#Íg¨Œ†≠Ak⁄@RYápÆX}ˆÛì Õ™‹ó»§ËÉÁM ı·ÔMï∂˘0)ÁM°∫$lOfπÛ%*hπ`∆b˝&æ≈ΩLtÅÜ˙ÑN‘Ëx*CP;ïäÆßPîk3€-R∑sÕÄÑ]Y–≠éÁÍF±gñÛSLPÊIsΩpﬂáä;¨gƒ1+Eo¡rïFuÏc^pBb+^Ø
m÷∏‘<ä◊ﬂ…’´˙…«s≠ãKS?˚≈%=5ÈzIø≠íªaÊ√å§H®V±ôûü˚Û…·|v I”r≠q…º≠∆ó`W∏‘Ì€aJﬁ-S»p˛ÈI<#|◊qàW'©î∂ÍÆk\4Y6ß_i-·Di_èÔ∫wR«}zS}yå3,m∞Y‚ó—p ⁄import errno
import json
import operator
import os
import shutil
import site
from optparse import SUPPRESS_HELP, Values
from typing import List, Optional

from pip._vendor.packaging.utils import canonicalize_name
from pip._vendor.rich import print_json

from pip._internal.cache import WheelCache
from pip._internal.cli import cmdoptions
from pip._internal.cli.cmdoptions import make_target_python
from pip._internal.cli.req_command import (
    RequirementCommand,
    with_cleanup,
)
from pip._internal.cli.status_codes import ERROR, SUCCESS
from pip._internal.exceptions import CommandError, InstallationError
from pip._internal.locations import get_scheme
from pip._internal.metadata import get_environment
from pip._internal.models.installation_report import InstallationReport
from pip._internal.operations.build.build_tracker import get_build_tracker
from pip._internal.operations.check import ConflictDetails, check_install_conflicts
from pip._internal.req import install_given_reqs
from pip._internal.req.req_install import (
    InstallRequirement,
    check_legacy_setup_py_options,
)
from pip._internal.utils.compat import WINDOWS
from pip._internal.utils.filesystem import test_writable_dir
from pip._internal.utils.logging import getLogger
from pip._internal.utils.misc import (
    check_externally_managed,
    ensure_dir,
    get_pip_version,
    protect_pip_from_modification_on_windows,
    warn_if_run_as_root,
    write_output,
)
from pip._internal.utils.temp_dir import TempDirectory
from pip._internal.utils.virtualenv import (
    running_under_virtualenv,
    virtualenv_no_global,
)
from pip._internal.wheel_builder import build, should_build_for_install_command

logger = getLogger(__name__)


class InstallCommand(RequirementCommand):
    """
    Install packages from:

    - PyPI (and other indexes) using requirement specifiers.
    - VCS project urls.
    - Local project directories.
    - Local or remote source archives.

    pip also supports installing from "requirements files", which provide
    an easy way to specify a whole environment to be installed.
    """

    usage = """
      %prog [options] <requirement specifier> [package-index-options] ...
      %prog [options] -r <requirements file> [package-index-options] ...
      %prog [options] [-e] <vcs project url> ...
      %prog [options] [-e] <local project path> ...
      %prog [options] <archive url/path> ..."""

    def add_options(self) -> None:
        self.cmd_opts.add_option(cmdoptions.requirements())
        self.cmd_opts.add_option(cmdoptions.constraints())
        self.cmd_opts.add_option(cmdoptions.no_deps())
        self.cmd_opts.add_option(cmdoptions.pre())

        self.cmd_opts.add_option(cmdoptions.editable())
        self.cmd_opts.add_option(
            "--dry-run",
            action="store_true",
            dest="dry_run",
            default=False,
            help=(
                "Don't actually install anything, just print what would be. "
                "Can be used in combination with --ignore-installed "
                "to 'resolve' the requirements."
            ),
        )
        self.cmd_opts.add_option(
            "-t",
            "--target",
            dest="target_dir",
            metavar="dir",
            default=None,
            help=(
                "Install packages into <dir>. "
                "By default this will not replace existing files/folders in "
                "<dir>. Use --upgrade to replace existing packages in <dir> "
                "with new versions."
            ),
        )
        cmdoptions.add_target_python_options(self.cmd_opts)

        self.cmd_opts.add_option(
            "--user",
            dest="use_user_site",
            action="store_true",
            help=(
                "Install to the Python user install directory for your "
                "platform. Typically ~/.local/, or %APPDATA%\\Python on "
                "Windows. (See the Python documentation for site.USER_BASE "
                "for full details.)"
            ),
        )
        self.cmd_opts.add_option(
            "--no-user",
            dest="use_user_site",
            action="store_false",
            help=SUPPRESS_HELP,
        )
        self.cmd_opts.add_option(
            "--root",
            dest="root_path",
            metavar="dir",
            default=None,
            help="Install everything relative to this alternate root directory.",
        )
        self.cmd_opts.add_option(
            "--prefix",
            dest="prefix_path",
            metavar="dir",
            default=None,
            help=(
                "Installation prefix where lib, bin and other top-level "
                "folders are placed. Note that the resulting installation may "
                "contain scripts and other resources which reference the "
                "Python interpreter of pip, and not that of ``--prefix``. "
                "See also the ``--python`` option if the intention is to "
                "install packages into another (possibly pip-free) "
                "environment."
            ),
        )

        self.cmd_opts.add_option(cmdoptions.src())

        self.cmd_opts.add_option(
            "-U",
            "--upgrade",
            dest="upgrade",
            action="store_true",
            help=(
                "Upgrade all specified packages to the newest available "
                "version. The handling of dependencies depends on the "
                "upgrade-strategy used."
            ),
        )

        self.cmd_opts.add_option(
            "--upgrade-strategy",
            dest="upgrade_strategy",
            default="only-if-needed",
            choices=["only-if-needed", "eager"],
            help=(
                "Determines how dependency upgrading should be handled "
                "[default: %default]. "
                '"eager" - dependencies are upgraded regardless of '
                "whether the currently installed version satisfies the "
                "requirements of the upgraded package(s). "
                '"only-if-needed" -  are upgraded only when they do not '
                "satisfy the requirements of the upgraded package(s)."
            ),
        )

        self.cmd_opts.add_option(
            "--force-reinstall",
            dest="force_reinstall",
            action="store_true",
            help="Reinstall all packages even if they are already up-to-date.",
        )

        self.cmd_opts.add_option(
            "-I",
            "--ignore-installed",
            dest="ignore_installed",
            action="store_true",
            help=(
                "Ignore the installed packages, overwriting them. "
                "This can break your system if the existing package "
                "is of a different version or was installed "
                "with a different package manager!"
            ),
        )

        self.cmd_opts.add_option(cmdoptions.ignore_requires_python())
        self.cmd_opts.add_option(cmdoptions.no_build_isolation())
        self.cmd_opts.add_option(cmdoptions.use_pep517())
        self.cmd_opts.add_option(cmdoptions.no_use_pep517())
        self.cmd_opts.add_option(cmdoptions.check_build_deps())
        self.cmd_opts.add_option(cmdoptions.override_externally_managed())

        self.cmd_opts.add_option(cmdoptions.config_settings())
        self.cmd_opts.add_option(cmdoptions.global_options())

        self.cmd_opts.add_option(
            "--compile",
            action="store_true",
            dest="compile",
            default=True,
            help="Compile Python source files to bytecode",
        )

        self.cmd_opts.add_option(
            "--no-compile",
            action="store_false",
            dest="compile",
            help="Do not compile Python source files to bytecode",
        )

        self.cmd_opts.add_option(
            "--no-warn-script-location",
            action="store_false",
            dest="warn_script_location",
            default=True,
            help="Do not warn when installing scripts outside PATH",
        )
        self.cmd_opts.add_option(
            "--no-warn-conflicts",
            action="store_false",
            dest="warn_about_conflicts",
            default=True,
            help="Do not warn about broken dependencies",
        )
        self.cmd_opts.add_option(cmdoptions.no_binary())
        self.cmd_opts.add_option(cmdoptions.only_binary())
        self.cmd_opts.add_option(cmdoptions.prefer_binary())
        self.cmd_opts.add_option(cmdoptions.require_hashes())
        self.cmd_opts.add_option(cmdoptions.progress_bar())
        self.cmd_opts.add_option(cmdoptions.root_user_action())

        index_opts = cmdoptions.make_option_group(
            cmdoptions.index_group,
            self.parser,
        )

        self.parser.insert_option_group(0, index_opts)
        self.parser.insert_option_group(0, self.cmd_opts)

        self.cmd_opts.add_option(
            "--report",
            dest="json_report_file",
            metavar="file",
            default=None,
            help=(
                "Generate a JSON file describing what pip did to install "
                "the provided requirements. "
                "Can be used in combination with --dry-run and --ignore-installed "
                "to 'resolve' the requirements. "
                "When - is used as file name it writes to stdout. "
                "When writing to stdout, please combine with the --quiet option "
                "to avoid mixing pip logging output with JSON output."
            ),
        )

    @with_cleanup
    def run(self, options: Values, args: List[str]) -> int:
        if options.use_user_site and options.target_dir is not None:
            raise CommandError("Can not combine '--user' and '--target'")

        # Check whether the environment we're installing into is externally
        # managed, as specified in PEP 668. Specifying --root, --target, or
        # --prefix disables the check, since there's no reliable way to locate
        # the EXTERNALLY-MANAGED file for those cases. An exception is also
        # made specifically for "--dry-run --report" for convenience.
        installing_into_current_environment = (
            not (options.dry_run and options.json_report_file)
            and options.root_path is None
            and options.target_dir is None
            and options.prefix_path is None
        )
        if (
            installing_into_current_environment
            and not options.override_externally_managed
        ):
            check_externally_managed()

        upgrade_strategy = "to-satisfy-only"
        if options.upgrade:
            upgrade_strategy = options.upgrade_strategy

        cmdoptions.check_dist_restriction(options, check_target=True)

        logger.verbose("Using %s", get_pip_version())
        options.use_user_site = decide_user_install(
            options.use_user_site,
            prefix_path=options.prefix_path,
            target_dir=options.target_dir,
            root_path=options.root_path,
            isolated_mode=options.isolated_mode,
        )

        target_temp_dir: Optional[TempDirectory] = None
        target_temp_dir_path: Optional[str] = None
        if options.target_dir:
            options.ignore_installed = True
            options.target_dir = os.path.abspath(options.target_dir)
            if (
                # fmt: off
                os.path.exists(options.target_dir) and
                not os.path.isdir(options.target_dir)
                # fmt: on
            ):
                raise CommandError(
                    "Target path exists but is not a directory, will not continue."
                )

            # Create a target directory for using with the target option
            target_temp_dir = TempDirectory(kind="target")
            target_temp_dir_path = target_temp_dir.path
            self.enter_context(target_temp_dir)

        global_options = options.global_options or []

        session = self.get_default_session(options)

        target_python = make_target_python(options)
        finder = self._build_package_finder(
            options=options,
            session=session,
            target_python=target_python,
            ignore_requires_python=options.ignore_requires_python,
        )
        build_tracker = self.enter_context(get_build_tracker())

        directory = TempDirectory(
            delete=not options.no_clean,
            kind="install",
            globally_managed=True,
        )

        try:
            reqs = self.get_requirements(args, options, finder, session)
            check_legacy_setup_py_options(options, reqs)

            wheel_cache = WheelCache(options.cache_dir)

            # Only when installing is it permitted to use PEP 660.
            # In other circumstances (pip wheel, pip download) we generate
            # regular (i.e. non editable) metadata and wheels.
            for req in reqs:
                req.permit_editable_wheels = True

            preparer = self.make_requirement_preparer(
                temp_build_dir=directory,
                options=options,
                build_tracker=build_tracker,
                session=session,
                finder=finder,
                use_user_site=options.use_user_site,
                verbosity=self.verbosity,
            )
            resolver = self.make_resolver(
                preparer=preparer,
                finder=finder,
                options=options,
                wheel_cache=wheel_cache,
                use_user_site=options.use_user_site,
                ignore_installed=options.ignore_installed,
                ignore_requires_python=options.ignore_requires_python,
                force_reinstall=options.force_reinstall,
                upgrade_strategy=upgrade_strategy,
                use_pep517=options.use_pep517,
                py_version_info=options.python_version,
            )

            self.trace_basic_info(finder)

            requirement_set = resolver.resolve(
                reqs, check_supported_wheels=not options.target_dir
            )

            if options.json_report_file:
                report = InstallationReport(requirement_set.requirements_to_install)
                if options.json_report_file == "-":
                    print_json(data=report.to_dict())
                else:
                    with open(options.json_report_file, "w", encoding="utf-8") as f:
                        json.dump(report.to_dict(), f, indent=2, ensure_ascii=False)

            if options.dry_run:
                would_install_items = sorted(
                    (r.metadata["name"], r.metadata["version"])
                    for r in requirement_set.requirements_to_install
                )
                if would_install_items:
                    write_output(
                        "Would install %s",
                        " ".join("-".join(item) for item in would_install_items),
                    )
                return SUCCESS

            try:
                pip_req = requirement_set.get_requirement("pip")
            except KeyError:
                modifying_pip = False
            else:
                # If we're not replacing an already installed pip,
                # we're not modifying it.
                modifying_pip = pip_req.satisfied_by is None
                if modifying_pip:
                    # Eagerly import this module to avoid crashes. Otherwise, this
                    # module would be imported *after* pip was replaced, resulting in
                    # crashes if the new self_outdated_check module was incompatible
                    # with the rest of pip that's already imported.
                    import pip._internal.self_outdated_check  # noqa: F401
            protect_pip_from_modification_on_windows(modifying_pip=modifying_pip)

            reqs_to_build = [
                r
                for r in requirement_set.requirements.values()
                if should_build_for_install_command(r)
            ]

            _, build_failures = build(
                reqs_to_build,
                wheel_cache=wheel_cache,
                verify=True,
                build_options=[],
                global_options=global_options,
            )

            if build_failures:
                raise InstallationError(
                    "ERROR: Failed to build installable wheels for some "
                    "pyproject.toml based projects ({})".format(
                        ", ".join(r.name for r in build_failures)  # type: ignore
                    )
                )

            to_install = resolver.get_installation_order(requirement_set)

            # Check for conflicts in the package set we're installing.
            conflicts: Optional[ConflictDetails] = None
            should_warn_about_conflicts = (
                not options.ignore_dependencies and options.warn_about_conflicts
            )
            if should_warn_about_conflicts:
                conflicts = self._determine_conflicts(to_install)

            # Don't warn about script install locations if
            # --target or --prefix has been specified
            warn_script_location = options.warn_script_location
            if options.target_dir or options.prefix_path:
                warn_script_location = False

            installed = install_given_reqs(
                to_install,
                global_options,
                root=options.root_path,
                home=target_temp_dir_path,
                prefix=options.prefix_path,
                warn_script_location=warn_script_location,
                use_user_site=options.use_user_site,
                pycompile=options.compile,
            )

            lib_locations = get_lib_location_guesses(
                user=options.use_user_site,
                home=target_temp_dir_path,
                root=options.root_path,
                prefix=options.prefix_path,
                isolated=options.isolated_mode,
            )
            env = get_environment(lib_locations)

            # Display a summary of installed packages, with extra care to
            # display a package name as it was requested by the user.
            installed.sort(key=operator.attrgetter("name"))
            summary = []
            installed_versions = {}
            for distribution in env.iter_all_distributions():
                installed_versions[distribution.canonical_name] = distribution.version
            for package in installed:
                display_name = package.name
                version = installed_versions.get(canonicalize_name(display_name), None)
                if version:
                    text = f"{display_name}-{version}"
                else:
                    text = display_name
                summary.append(text)

            if conflicts is not None:
                self._warn_about_conflicts(
                    conflicts,
                    resolver_variant=self.determine_resolver_variant(options),
                )

            installed_desc = " ".join(summary)
            if installed_desc:
                write_output(
                    "Successfully installed %s",
                    installed_desc,
                )
        except OSError as error:
            show_traceback = self.verbosity >= 1

            message = create_os_error_message(
                error,
                show_traceback,
                options.use_user_site,
            )
            logger.error(message, exc_info=show_traceback)

            return ERROR

        if options.target_dir:
            assert target_temp_dir
            self._handle_target_dir(
                options.target_dir, target_temp_dir, options.upgrade
            )
        if options.root_user_action == "warn":
            warn_if_run_as_root()
        return SUCCESS

    def _handle_target_dir(
        self, target_dir: str, target_temp_dir: TempDirectory, upgrade: bool
    ) -> None:
        ensure_dir(target_dir)

        # Checking both purelib and platlib directories for installed
        # packages to be moved to target directory
        lib_dir_list = []

        # Checking both purelib and platlib directories for installed
        # packages to be moved to target directory
        scheme = get_scheme("", home=target_temp_dir.path)
        purelib_dir = scheme.purelib
        platlib_dir = scheme.platlib
        data_dir = scheme.data

        if os.path.exists(purelib_dir):
            lib_dir_list.append(purelib_dir)
        if os.path.exists(platlib_dir) and platlib_dir != purelib_dir:
            lib_dir_list.append(platlib_dir)
        if os.path.exists(data_dir):
            lib_dir_list.append(data_dir)

        for lib_dir in lib_dir_list:
            for item in os.listdir(lib_dir):
                if lib_dir == data_dir:
                    ddir = os.path.join(data_dir, item)
                    if any(s.startswith(ddir) for s in lib_dir_list[:-1]):
                        continue
                target_item_dir = os.path.join(target_dir, item)
                if os.path.exists(target_item_dir):
                    if not upgrade:
                        logger.warning(
                            "Target directory %s already exists. Specify "
                            "--upgrade to force replacement.",
                            target_item_dir,
                        )
                        continue
                    if os.path.islink(target_item_dir):
                        logger.warning(
                            "Target directory %s already exists and is "
                            "a link. pip will not automatically replace "
                            "links, please remove if replacement is "
                            "desired.",
                            target_item_dir,
                        )
                        continue
                    if os.path.isdir(target_item_dir):
                        shutil.rmtree(target_item_dir)
                    else:
                        os.remove(target_item_dir)

                shutil.move(os.path.join(lib_dir, item), target_item_dir)

    def _determine_conflicts(
        self, to_install: List[InstallRequirement]
    ) -> Optional[ConflictDetails]:
        try:
            return check_install_conflicts(to_install)
        except Exception:
            logger.exception(
                "Error while checking for conflicts. Please file an issue on "
                "pip's issue tracker: https://github.com/pypa/pip/issues/new"
            )
            return None

    def _warn_about_conflicts(
        self, conflict_details: ConflictDetails, resolver_variant: str
    ) -> None:
        package_set, (missing, conflicting) = conflict_details
        if not missing and not conflicting:
            return

        parts: List[str] = []
        if resolver_variant == "legacy":
            parts.append(
                "pip's legacy dependency resolver does not consider dependency "
                "conflicts when selecting packages. This behaviour is the "
                "source of the following dependency conflicts."
            )
        else:
            assert resolver_variant == "resolvelib"
            parts.append(
                "pip's dependency resolver does not currently take into account "
                "all the packages that are installed. This behaviour is the "
                "source of the following dependency conflicts."
            )

        # NOTE: There is some duplication here, with commands/check.py
        for project_name in missing:
            version = package_set[project_name][0]
            for dependency in missing[project_name]:
                message = (
                    f"{project_name} {version} requires {dependency[1]}, "
                    "which is not installed."
                )
                parts.append(message)

        for project_name in conflicting:
            version = package_set[project_name][0]
            for dep_name, dep_version, req in conflicting[project_name]:
                message = (
                    "{name} {version} requires {requirement}, but {you} have "
                    "{dep_name} {dep_version} which is incompatible."
                ).format(
                    name=project_name,
                    version=version,
                    requirement=req,
                    dep_name=dep_name,
                    dep_version=dep_version,
                    you=("you" if resolver_variant == "resolvelib" else "you'll"),
                )
                parts.append(message)

        logger.critical("\n".join(parts))


def get_lib_location_guesses(
    user: bool = False,
    home: Optional[str] = None,
    root: Optional[str] = None,
    isolated: bool = False,
    prefix: Optional[str] = None,
) -> List[str]:
    scheme = get_scheme(
        "",
        user=user,
        home=home,
        root=root,
        isolated=isolated,
        prefix=prefix,
    )
    return [scheme.purelib, scheme.platlib]


def site_packages_writable(root: Optional[str], isolated: bool) -> bool:
    return all(
        test_writable_dir(d)
        for d in set(get_lib_location_guesses(root=root, isolated=isolated))
    )


def decide_user_install(
    use_user_site: Optional[bool],
    prefix_path: Optional[str] = None,
    target_dir: Optional[str] = None,
    root_path: Optional[str] = None,
    isolated_mode: bool = False,
) -> bool:
    """Determine whether to do a user install based on the input options.

    If use_user_site is False, no additional checks are done.
    If use_user_site is True, it is checked for compatibility with other
    options.
    If use_user_site is None, the default behaviour depends on the environment,
    which is provided by the other arguments.
    """
    # In some cases (config from tox), use_user_site can be set to an integer
    # rather than a bool, which 'use_user_site is False' wouldn't catch.
    if (use_user_site is not None) and (not use_user_site):
        logger.debug("Non-user install by explicit request")
        return False

    if use_user_site:
        if prefix_path:
            raise CommandError(
                "Can not combine '--user' and '--prefix' as they imply "
                "different installation locations"
            )
        if virtualenv_no_global():
            raise InstallationError(
                "Can not perform a '--user' install. User site-packages "
                "are not visible in this virtualenv."
            )
        logger.debug("User install by explicit request")
        return True

    # If we are here, user installs have not been explicitly requested/avoided
    assert use_user_site is None

    # user install incompatible with --prefix/--target
    if prefix_path or target_dir:
        logger.debug("Non-user install due to --prefix or --target option")
        return False

    # If user installs are not enabled, choose a non-user install
    if not site.ENABLE_USER_SITE:
        logger.debug("Non-user install because user site-packages disabled")
        return False

    # If we have permission for a non-user install, do that,
    # otherwise do a user install.
    if site_packages_writable(root=root_path, isolated=isolated_mode):
        logger.debug("Non-user install because site-packages writeable")
        return False

    logger.info(
        "Defaulting to user installation because normal site-packages "
        "is not writeable"
    )
    return True


def create_os_error_message(
    error: OSError, show_traceback: bool, using_user_site: bool
) -> str:
    """Format an error message for an OSError

    It may occur anytime during the execution of the install command.
    """
    parts = []

    # Mention the error if we are not going to show a traceback
    parts.append("Could not install packages due to an OSError")
    if not show_traceback:
        parts.append(": ")
        parts.append(str(error))
    else:
        parts.append(".")

    # Spilt the error indication from a helper message (if any)
    parts[-1] += "\n"

    # Suggest useful actions to the user:
    #  (1) using user site-packages or (2) verifying the permissions
    if error.errno == errno.EACCES:
        user_option_part = "Consider using the `--user` option"
        permissions_part = "Check the permissions"

        if not running_under_virtualenv() and not using_user_site:
            parts.extend(
                [
                    user_option_part,
                    " or ",
                    permissions_part.lower(),
                ]
            )
        else:
            parts.append(permissions_part)
        parts.append(".\n")

    # Suggest the user to enable Long Paths if path length is
    # more than 260
    if (
        WINDOWS
        and error.errno == errno.ENOENT
        and error.filename
        and len(error.filename) > 260
    ):
        parts.append(
            "HINT: This error might have occurred since "
            "this system does not have Windows Long Path "
            "support enabled. You can find information on "
            "how to enable this at "
            "https://pip.pypa.io/warnings/enable-long-paths\n"
        )

    return "".join(parts).strip() + "\n"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            "Filters"
{
	"Favorites"
	{
		"1"
		{
			"name"		"74.91.119.34:27019"
			"address"		"74.91.119.34:27019"
			"LastPlayed"		"0"
			"appid"		"0"
			"accountid"		"10382536"
		}
		"2"
		{
			"name"		"63.251.42.45:27015"
			"address"		"63.251.42.45:27015"
			"LastPlayed"		"0"
			"appid"		"0"
			"accountid"		"10430332"
		}
	}
	"history"
	{
		"3"
		{
			"name"		"192.168.0.100:27015"
			"address"		"192.168.0.100:27015"
			"LastPlayed"		"1620044655"
			"appid"		"0"
			"accountid"		"0"
		}
		"4"
		{
			"name"		"0.0.0.1:27015"
			"address"		"0.0.0.1:27015"
			"LastPlayed"		"1668477773"
			"appid"		"0"
			"accountid"		"0"
		}
		"5"
		{
			"name"		"0.0.0.2:27015"
			"address"		"0.0.0.2:27015"
			"LastPlayed"		"1665800860"
			"appid"		"0"
			"accountid"		"0"
		}
		"6"
		{
			"name"		"155.133.249.95:27209"
			"address"		"155.133.249.95:27209"
			"LastPlayed"		"1592258328"
			"appid"		"0"
			"accountid"		"0"
		}
		"7"
		{
			"name"		"155.133.249.96:27240"
			"address"		"155.133.249.96:27240"
			"LastPlayed"		"1592265146"
			"appid"		"0"
			"accountid"		"0"
		}
		"8"
		{
			"name"		"155.133.249.96:27102"
			"address"		"155.133.249.96:27102"
			"LastPlayed"		"1592359938"
			"appid"		"0"
			"accountid"		"0"
		}
		"9"
		{
			"name"		"155.133.249.95:27097"
			"address"		"155.133.249.95:27097"
			"LastPlayed"		"1592362817"
			"appid"		"0"
			"accountid"		"0"
		}
		"10"
		{
			"name"		"155.133.249.95:27195"
			"address"		"155.133.249.95:27195"
			"LastPlayed"		"1592447143"
			"appid"		"0"
			"accountid"		"0"
		}
		"11"
		{
			"name"		"155.133.249.96:27187"
			"address"		"155.133.249.96:27187"
			"LastPlayed"		"1592525352"
			"appid"		"0"
			"accountid"		"0"
		}
		"12"
		{
			"name"		"155.133.249.96:27096"
			"address"		"155.133.249.96:27096"
			"LastPlayed"		"1592528231"
			"appid"		"0"
			"accountid"		"0"
		}
		"13"
		{
			"name"		"190.216.121.161:27151"
			"address"		"190.216.121.161:27151"
			"LastPlayed"		"1592528377"
			"appid"		"0"
			"accountid"		"0"
		}
		"14"
		{
			"name"		"155.133.249.96:27223"
			"address"		"155.133.249.96:27223"
			"LastPlayed"		"1592531170"
			"appid"		"0"
			"accountid"		"0"
		}
		"15"
		{
			"name"		"155.133.249.95:27140"
			"address"		"155.133.249.95:27140"
			"LastPlayed"		"1592532405"
			"appid"		"0"
			"accountid"		"0"
		}
		"16"
		{
			"name"		"155.133.249.95:27130"
			"address"		"155.133.249.95:27130"
			"LastPlayed"		"1592619017"
			"appid"		"0"
			"accountid"		"0"
		}
		"17"
		{
			"name"		"155.133.249.96:27205"
			"address"		"155.133.249.96:27205"
			"LastPlayed"		"1592683475"
			"appid"		"0"
			"accountid"		"0"
		}
		"18"
		{
			"name"		"155.133.249.95:27233"
			"address"		"155.133.249.95:27233"
			"LastPlayed"		"1592783746"
			"appid"		"0"
			"accountid"		"0"
		}
		"19"
		{
			"name"		"155.133.249.96:27156"
			"address"		"155.133.249.96:27156"
			"LastPlayed"		"1592963142"
			"appid"		"0"
			"accountid"		"0"
		}
		"20"
		{
			"name"		"155.133.249.96:27183"
			"address"		"155.133.249.96:27183"
			"LastPlayed"		"1593137510"
			"appid"		"0"
			"accountid"		"0"
		}
		"21"
		{
			"name"		"192.168.0.15:27015"
			"address"		"192.168.0.15:27015"
			"LastPlayed"		"1602722846"
			"appid"		"0"
			"accountid"		"0"
		}
		"22"
		{
			"name"		"155.133.249.96:27168"
			"address"		"155.133.249.96:27168"
			"LastPlayed"		"1596683473"
			"appid"		"0"
			"accountid"		"0"
		}
		"23"
		{
			"name"		"192.168.0.15:27055"
			"address"		"192.168.0.15:27055"
			"LastPlayed"		"1600554616"
			"appid"		"0"
			"accountid"		"0"
		}
		"24"
		{
			"name"		"192.168.42.60:27015"
			"address"		"192.168.42.60:27015"
			"LastPlayed"		"1601089221"
			"appid"		"0"
			"accountid"		"0"
		}
		"25"
		{
			"name"		"155.133.249.96:27173"
			"address"		"155.133.249.96:27173"
			"LastPlayed"		"1601316688"
			"appid"		"0"
			"accountid"		"0"
		}
		"26"
		{
			"name"		"45.235.98.222:27020"
			"address"		"45.235.98.222:27020"
			"LastPlayed"		"1606178221"
			"appid"		"0"
			"accountid"		"0"
		}
		"27"
		{
			"name"		"155.133.249.90:27043"
			"address"		"155.133.249.90:27043"
			"LastPlayed"		"1606356025"
			"appid"		"0"
			"accountid"		"0"
		}
		"28"
		{
			"name"		"190.216.121.159:27120"
			"address"		"190.216.121.159:27120"
			"LastPlayed"		"1610155265"
			"appid"		"0"
			"accountid"		"0"
		}
		"29"
		{
			"name"		"155.133.249.95:27224"
			"address"		"155.133.249.95:27224"
			"LastPlayed"		"1610392518"
			"appid"		"0"
			"accountid"		"0"
		}
		"30"
		{
			"name"		"190.216.121.163:27179"
			"address"		"190.216.121.163:27179"
			"LastPlayed"		"1610747005"
			"appid"		"0"
			"accountid"		"0"
		}
		"31"
		{
			"name"		"155.133.249.90:27148"
			"address"		"155.133.249.90:27148"
			"LastPlayed"		"1611027138"
			"appid"		"0"
			"accountid"		"0"
		}
		"32"
		{
			"name"		"155.133.249.95:27215"
			"address"		"155.133.249.95:27215"
			"LastPlayed"		"1611029194"
			"appid"		"0"
			"accountid"		"0"
		}
		"33"
		{
			"name"		"192.168.0.100:27087"
			"address"		"192.168.0.100:27087"
			"LastPlayed"		"1619562833"
			"appid"		"0"
			"accountid"		"0"
		}
		"34"
		{
			"name"		"192.168.0.67:27015"
			"address"		"192.168.0.67:27015"
			"LastPlayed"		"1633189223"
			"appid"		"0"
			"accountid"		"0"
		}
		"35"
		{
			"name"		"192.168.0.231:27015"
			"address"		"192.168.0.231:27015"
			"LastPlayed"		"1638232784"
			"appid"		"0"
			"accountid"		"0"
		}
		"36"
		{
			"name"		"190.217.33.89:27194"
			"address"		"190.217.33.89:27194"
			"LastPlayed"		"1638127680"
			"appid"		"0"
			"accountid"		"0"
		}
		"37"
		{
			"name"		"172.28.160.1:27015"
			"address"		"172.28.160.1:27015"
			"LastPlayed"		"1644723986"
			"appid"		"0"
			"accountid"		"0"
		}
		"38"
		{
			"name"		"172.19.80.1:27015"
			"address"		"172.19.80.1:27015"
			"LastPlayed"		"1645408115"
			"appid"		"0"
			"accountid"		"0"
		}
		"39"
		{
			"name"		"172.30.192.1:27015"
			"address"		"172.30.192.1:27015"
			"LastPlayed"		"1645840100"
			"appid"		"0"
			"accountid"		"0"
		}
		"40"
		{
			"name"		"172.27.80.1:27015"
			"address"		"172.27.80.1:27015"
			"LastPlayed"		"1646360284"
			"appid"		"0"
			"accountid"		"0"
		}
		"41"
		{
			"name"		"172.27.128.1:27015"
			"address"		"172.27.128.1:27015"
			"LastPlayed"		"1646618644"
			"appid"		"0"
			"accountid"		"0"
		}
		"42"
		{
			"name"		"192.168.0.224:27015"
			"address"		"192.168.0.224:27015"
			"LastPlayed"		"1658700235"
			"appid"		"0"
			"accountid"		"0"
		}
		"43"
		{
			"name"		"127.0.1.1:27015"
			"address"		"127.0.1.1:27015"
			"LastPlayed"		"1661822782"
			"appid"		"0"
			"accountid"		"0"
		}
		"44"
		{
			"name"		"192.168.56.1:27015"
			"address"		"192.168.56.1:27015"
			"LastPlayed"		"1662937434"
			"appid"		"0"
			"accountid"		"0"
		}
		"45"
		{
			"name"		"155.133.249.21:27127"
			"address"		"155.133.249.21:27127"
			"LastPlayed"		"1665110368"
			"appid"		"0"
			"accountid"		"0"
		}
		"46"
		{
			"name"		"155.133.249.22:27117"
			"address"		"155.133.249.22:27117"
			"LastPlayed"		"1665113300"
			"appid"		"0"
			"accountid"		"0"
		}
		"47"
		{
			"name"		"127.0.0.1:27015"
			"address"		"127.0.0.1:27015"
			"LastPlayed"		"1722049893"
			"appid"		"0"
			"accountid"		"0"
		}
		"48"
		{
			"name"		"0.0.0.3:27015"
			"address"		"0.0.0.3:27015"
			"LastPlayed"		"1665807227"
			"appid"		"0"
			"accountid"		"0"
		}
		"49"
		{
			"name"		"0.0.0.4:27015"
			"address"		"0.0.0.4:27015"
			"LastPlayed"		"1665808372"
			"appid"		"0"
			"accountid"		"0"
		}
		"50"
		{
			"name"		"155.133.249.22:27150"
			"address"		"155.133.249.22:27150"
			"LastPlayed"		"1665958243"
			"appid"		"0"
			"accountid"		"0"
		}
		"51"
		{
			"name"		"155.133.249.21:27218"
			"address"		"155.133.249.21:27218"
			"LastPlayed"		"1666580390"
			"appid"		"0"
			"accountid"		"0"
		}
		"52"
		{
			"name"		"192.168.1.36:27015"
			"address"		"192.168.1.36:27015"
			"LastPlayed"		"1671847033"
			"appid"		"0"
			"accountid"		"0"
		}
		"53"
		{
			"name"		"192.168.1.35:27015"
			"address"		"192.168.1.35:27015"
			"LastPlayed"		"1676248592"
			"appid"		"0"
			"accountid"		"0"
		}
		"54"
		{
			"name"		"192.168.1.38:27015"
			"address"		"192.168.1.38:27015"
			"LastPlayed"		"1684204672"
			"appid"		"0"
			"accountid"		"0"
		}
		"55"
		{
			"name"		"192.168.1.44:27015"
			"address"		"192.168.1.44:27015"
			"LastPlayed"		"1692467230"
			"appid"		"0"
			"accountid"		"0"
		}
		"56"
		{
			"name"		"192.168.1.44:27120"
			"address"		"192.168.1.44:27120"
			"LastPlayed"		"1686713413"
			"appid"		"0"
			"accountid"		"0"
		}
		"57"
		{
			"name"		"31.214.158.201:10701"
			"address"		"31.214.158.201:10701"
			"LastPlayed"		"1689821630"
			"appid"		"0"
			"accountid"		"0"
		}
		"58"
		{
			"name"		"31.214.158.201:10901"
			"address"		"31.214.158.201:10901"
			"LastPlayed"		"1689821675"
			"appid"		"0"
			"accountid"		"0"
		}
		"59"
		{
			"name"		"31.214.158.200:22201"
			"address"		"31.214.158.200:22201"
			"LastPlayed"		"1690076388"
			"appid"		"0"
			"accountid"		"0"
		}
		"60"
		{
			"name"		"158.69.22.27:27025"
			"address"		"158.69.22.27:27025"
			"LastPlayed"		"1693359210"
			"appid"		"0"
			"accountid"		"0"
		}
		"61"
		{
			"name"		"185.65.175.135:27021"
			"address"		"185.65.175.135:27021"
			"LastPlayed"		"1690084637"
			"appid"		"0"
			"accountid"		"0"
		}
		"62"
		{
			"name"		"185.65.175.136:27031"
			"address"		"185.65.175.136:27031"
			"LastPlayed"		"1690084682"
			"appid"		"0"
			"accountid"		"0"
		}
		"63"
		{
			"name"		"149.28.113.11:27015"
			"address"		"149.28.113.11:27015"
			"LastPlayed"		"1690089450"
			"appid"		"0"
			"accountid"		"0"
		}
		"64"
		{
			"name"		"155.133.249.206:27513"
			"address"		"155.133.249.206:27513"
			"LastPlayed"		"1700016723"
			"appid"		"0"
			"accountid"		"0"
		}
		"65"
		{
			"name"		"155.133.249.206:27318"
			"address"		"155.133.249.206:27318"
			"LastPlayed"		"1700021553"
			"appid"		"0"
			"accountid"		"0"
		}
		"66"
		{
			"name"		"155.133.249.205:27421"
			"address"		"155.133.249.205:27421"
			"LastPlayed"		"1700102304"
			"appid"		"0"
			"accountid"		"0"
		}
		"67"
		{
			"name"		"155.133.249.205:27070"
			"address"		"155.133.249.205:27070"
			"LastPlayed"		"1700105662"
			"appid"		"0"
			"accountid"		"0"
		}
		"68"
		{
			"name"		"192.168.1.40:27015"
			"address"		"192.168.1.40:27015"
			"LastPlayed"		"1704683563"
			"appid"		"0"
			"accountid"		"0"
		}
		"69"
		{
			"name"		"155.133.249.205:27414"
			"address"		"155.133.249.205:27414"
			"LastPlayed"		"1700353985"
			"appid"		"0"
			"accountid"		"0"
		}
		"70"
		{
			"name"		"169.254.74.225:27202"
			"address"		"169.254.74.225:27202"
			"LastPlayed"		"1703820807"
			"appid"		"0"
			"accountid"		"0"
		}
		"71"
		{
			"name"		"169.254.112.2:27147"
			"address"		"169.254.112.2:27147"
			"LastPlayed"		"1703821325"
			"appid"		"0"
			"accountid"		"0"
		}
	}
	"lastupdate"		"1722292277"
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 INDX( 	 ∫´           (   
  Ë       ⁄v ⁄               ©•    X H     r•    y\‚⁄y\‚⁄y\‚⁄